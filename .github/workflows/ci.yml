# 🚀 Eidosian CI Pipeline v3.15.0
# Fractal test architecture that scales from unit to integration seamlessly

name: Eidosian Universal CI

on:
  push:
    branches: [main, master, develop]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable runner debugging mode"
        required: false
        default: false
        type: boolean

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Environment variables for all jobs    ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1
  POETRY_VIRTUALENVS_CREATE: false
  POETRY_VERSION: "1.8.3"

# Prevent duplicate workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: ⚙️ Validate
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: echo "should_run=true" >> $GITHUB_OUTPUT

  lint:
    name: 🧹 Lint
    needs: validate
    if: needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            poetry.lock

      - name: 📦 Install dependencies
        id: deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # If poetry.lock exists, use poetry
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry==$POETRY_VERSION
              poetry config virtualenvs.create false
              poetry install --only dev --no-interaction
          # Otherwise fall back to pip
          else
              pip install -e ".[dev]" || pip install -e .
              pip install black isort flake8 mypy pylint
          fi

      - name: 🔍 Check code formatting
        run: |
          if command -v black >/dev/null 2>&1; then
            black . --check --diff || echo "::warning::Code formatting issues detected"
          else
            echo "::warning::black not installed, skipping format check"
          fi

          if command -v isort >/dev/null 2>&1; then
            isort . --check --diff || echo "::warning::Import sorting issues detected"
          else
            echo "::warning::isort not installed, skipping import check"
          fi

      - name: 🔬 Lint with flake8
        run: |
          if command -v flake8 >/dev/null 2>&1; then
            flake8 . --count --statistics --show-source --exit-zero
          else
            echo "::warning::flake8 not installed, skipping lint check"
          fi

      - name: 🧬 Deep analysis with pylint
        run: |
          if command -v pylint >/dev/null 2>&1; then
            pylint --recursive=y . --exit-zero || true
          else
            echo "::warning::pylint not installed, skipping deep analysis"
          fi

      - name: 📐 Type check with mypy
        run: |
          if command -v mypy >/dev/null 2>&1; then
            mypy . --show-error-codes || echo "::warning::Type checking issues detected"
          else
            echo "::warning::mypy not installed, skipping type check"
          fi

  test:
    name: 🧪 Test
    needs: [validate, lint]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        include:
          - python-version: "3.12"
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            poetry.lock

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry==$POETRY_VERSION
              poetry config virtualenvs.create false
              poetry install --with dev,test --no-interaction
          else
              pip install -e ".[dev,test]" || pip install -e .
              pip install pytest pytest-cov pytest-xdist hypothesis
          fi
        shell: bash

      - name: 🔍 Run tests
        run: |
          if command -v pytest >/dev/null 2>&1; then
            pytest --cov=. --cov-report=xml --cov-report=term-missing -v
          else
            echo "::error::pytest not found, test execution failed"
            exit 1
          fi

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: 📚 Documentation
    needs: [validate, lint]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            poetry.lock

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry==$POETRY_VERSION
              poetry config virtualenvs.create false
              poetry install --with docs --no-interaction
          else
              pip install -e ".[docs]" || pip install -e .
              pip install sphinx sphinx-rtd-theme myst-parser
          fi

      - name: 📝 Build docs
        run: |
          if [ -d "docs" ]; then
              cd docs
              if [ -f "Makefile" ]; then
                  make html
              else
                  echo "::warning::No Makefile found in docs directory"
                  mkdir -p _build/html
                  if command -v sphinx-build >/dev/null 2>&1; then
                      sphinx-build -b html . _build/html
                  else
                      echo "No sphinx found" > _build/html/index.html
                  fi
              fi
          else
              echo "::warning::No docs directory found, skipping documentation build"
              mkdir -p _build/html
              echo "No documentation found" > _build/html/index.html
          fi

      - name: 📤 Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ github.sha }}
          path: docs/_build/html || _build/html
          retention-days: 7

  build:
    name: 📦 Build
    needs: [validate, test]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            poetry.lock

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install build twine setuptools wheel

      - name: 🏗️ Build package
        run: |
          if [ -f pyproject.toml ]; then
              python -m build
          else
              python setup.py sdist bdist_wheel
          fi

      - name: ✅ Check package
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            twine check dist/* || echo "::warning::Package validation issues detected"
          else
            echo "::error::No distribution files found in dist/"
            exit 1
          fi

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: dist/
          retention-days: 7

  integration:
    name: 🧩 Integration
    needs: [validate, build]
    if: github.event_name == 'push' && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Download package
        uses: actions/download-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: dist/

      - name: 🧪 Install and verify package
        run: |
          # Find wheel file
          WHEEL=$(find dist -name "*.whl" | head -n 1)
          if [ -z "$WHEEL" ]; then
              echo "::error::No wheel found in artifacts!"
              exit 1
          fi

          # Install wheel in isolated environment
          python -m venv test_env
          source test_env/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install $WHEEL

          # Extract package name
          PKG_NAME=$(basename $WHEEL | cut -d'-' -f1 | tr '-' '_')
          echo "Testing package: $PKG_NAME"

          # Verify import works
          python -c "import $PKG_NAME; print(f'Successfully imported {$PKG_NAME}')"
        shell: bash

  pipeline:
    name: 🚀 Pipeline
    needs: [lint, test, docs, build, integration]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Pipeline Status
        run: |
          FAILED_JOBS=()

          # Check each job result
          for job in lint test docs build integration; do
            if [ "${{ needs[format('{0}', job)].result }}" == "failure" ]; then
              FAILED_JOBS+=("$job")
            fi
          done

          # Report results
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
              echo "::error::Pipeline failed in jobs: ${FAILED_JOBS[*]}"
              exit 1
          else
              echo "::notice::All checks passed successfully"
              exit 0
          fi
